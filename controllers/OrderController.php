<?php

namespace app\controllers;

use app\helpers\AuthHelper;
use app\helpers\UtilityHelper;
use app\helpers\LimeLightHelper;

//use app\models\Forms\UpsellForm;
use app\models\Forms\UpsellForm;
use app\models\Orders;
use app\models\OrderStepOne;
use Error;
use Yii;
use yii\helpers\Url;
use yii\web\Controller;
use yii\web\Response;
use yii\widgets\ActiveForm;

class OrderController extends Controller
{
    /**
     * @var mixed
     */
    private $payment_processor;

    /**
     * Return view of Order
     *
     * @return string
     */
    public function beforeAction($action)
    {

        $session = Yii::$app->session;
        $session['product_layout'] = 'structure1';
        $session['home_page_url'] = '/';
        $session['order_page_url'] = '/order';

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionUpsell()
    {
        $model = new \app\models\Forms\UpsellForm();
        // validate any AJAX requests fired off by the form
        if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return ActiveForm::validate($model);
        }
        return $this->render('upsell', ['model' => $model]);
    }

    public function actionUpsellProcess()
    {
        $model = new UpsellForm();
        if ($model->load(\Yii::$app->request->post())) {
            if ($model->validate()) {
                $prev_order = Orders::find()->where(['id' => $model->previous_order_id])->asArray()->one();
                if ($prev_order['payment_processor'] == 'credit_card') {
                    $prev_order['fields_expmonth'] = substr($prev_order['expirationDate'], 0, 2);
                    $prev_order['fields_expyear'] = substr($prev_order['expirationDate'], 3, 2);
                }
                $prev_order['terms'] = 1;
                Yii::$app->request->setBodyParams(['OrderForm' => $prev_order, 'product_id' => $model->product_id]);
                return $this->actionMakeOrder();
            } else {
                $errors = '';
                foreach ($model->errors as $field => $error) {
                    $errors .= $model->getAttributeLabel($field) . ': ' . $error[0] . '<br>';
                }
                return Yii::$app->response->content = $errors;
            }
        } else {
            return Yii::$app->response->content = "No Previous Order";
        }
    }

    /**
     * Return view of Order
     *
     * @return string
     */
    public function actionOrder()
    {
        $model = new \app\models\Forms\OrderForm();
        // validate any AJAX requests fired off by the form
        if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return ActiveForm::validate($model);
        }
        if ($model->load(\Yii::$app->request->post())) {
            if ($model->validate()) {
                // form inputs are valid, do something here
                return;
            }
        }
        return $this->render('order', ['model' => $model,]);
    }

    public function actionMakeOrder()
    {
        $model = new \app\models\Forms\OrderForm();
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            $this->payment_processor = $model->payment_processor;
            $shippingId = isset($_REQUEST['shippingId']) ? $this->shippingId() : '5';
            $shippingAmount = isset($_REQUEST['shippingId']) ? $this->shippingAmount() : '0';
            $model->cardNumber = isset($model->cardNumber) ? str_replace('-', '', $model->cardNumber) : FALSE;
            $model->billingSameAsShipping = 'YES';
            // Ban IP addresses
            $ip_address_block = ['212.102.40.146', '156.146.38.144', '69.167.11.217'];
            if (in_array(UtilityHelper::getClientIp(), $ip_address_block, TRUE)) {
                return Yii::$app->response->content = "YOU ARE BANNED!";
            }
            $init_order_id = Orders::createOrder($model, $this->getProducts(), $shippingId, $shippingAmount);
            if ($model->payment_processor == 'credit_card') {
                AuthHelper::doPayment($init_order_id);
            }
            $order = Orders::findOne($init_order_id);
            if ($model->payment_processor == 'paypal' && isset($_REQUEST['pp_subscription_id'])) {
                $_SESSION['previous_order'] = [];
                $_SESSION['previous_order']['id'] = $order->id;
                $_SESSION['previous_order']['payment_processor'] = $order->payment_processor;
                $order->pp_subscription_id = $_REQUEST['pp_subscription_id'];
                $order->save();
                return;
            }
            if ($order) {
                if ($order->status == Orders::STATUS_CONFIRMED) {
                    $_SESSION['previous_order']                      = [];
                    $_SESSION['previous_order']['id']                = $order->id;
                    $_SESSION['previous_order']['payment_processor'] = $order->payment_processor;
                    $next_page                                       = $_REQUEST['next_page'] ?? Url::to(['/order/thankyou']);
                    $return = ['status' => '100', 'redirect_to' => $next_page];
                    return Yii::$app->response->content = json_encode($return);
                } else {
                    //$model->addError('OrderError', $order->errorMessage);
                    return Yii::$app->response->content = $order->errorMessage;
                }
            }
        } else {
            $errors = '';
            foreach ($model->errors as $field => $error) {
                $errors .= $model->getAttributeLabel($field) . ': ' . $error[0] . '<br>';
            }
            return Yii::$app->response->content = $errors;
        }
    }


    // Make Order for Limelight Only
    public function actionMakeOrder2() {
        $model = new \app\models\Forms\OrderForm();
        
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
        $this->payment_processor = $model->payment_processor;

        $shippingId     = isset($_REQUEST['shippingId']) ? $this->shippingId() : '5';
        $shippingAmount = isset($_REQUEST['shippingId']) ? $this->shippingAmount() : '0';
        
        $model->cardNumber = isset($model->cardNumber) ? str_replace('-', '', $model->cardNumber) : FALSE;
        $model->billingSameAsShipping = 'YES';

        $request = $_REQUEST['OrderForm'];
        $ccType = ($request['creditCardType'] == 'mastercard') ? 'master' : $request['creditCardType'];
        
        $requestData = [
            'sessionId' => '16165974894565',
            'productId' => $_REQUEST['product_id'],

            'firstName' => $request['firstName'],
            'lastName' => $request['lastName'],
            'phone'    => $request['phone'],
            'email'    => $request['email'],

            'shippingAddress1' => $request['shippingAddress1'],
            'shippingZip'      => $request['shippingZip'],
            'shippingCity'     => $request['shippingCity'],
            'shippingCountry'  => $request['shippingCountry'],
            'shippingState'    => $request['shippingState'],

            'shippingId' => $shippingId,

            'billingSameAsShipping' => $model->billingSameAsShipping,

            'creditCardType' => $ccType,
            'creditCardNumber' => $model->cardNumber,
            'expirationDate' => $request['fields_expmonth'] . $request['fields_expyear'],
            'CVV' => $request['cvv'],
        ];
        
        $response = LimeLightHelper::createNewOrder($requestData, Yii::$app->params['CampaignID']);
        
        if (isset($response['responseCode']) && $response['responseCode'] == 100)
        {
            unset($_SESSION['cart']);
            unset($_SESSION['promo_code']);

            $next_page  = $_REQUEST['next_page'] ?? Url::to(['/order/thankyou']);
            $return = ['status' => '100', 'redirect_to' => $next_page];
            return Yii::$app->response->content = json_encode($return);
        } else {
            return Yii::$app->response->content = $response['errorMessage'];
        }
        } else {
        $errors = '';
        foreach ($model->errors as $field => $error) {
            $errors .= $model->getAttributeLabel($field) . ': ' . $error[0] . '<br>';
        }
        return Yii::$app->response->content = $errors;
        }
    }

    public function actionPpConfirm($id)
    {
        $order = Orders::find()->where(['pp_subscription_id' => $id])->orderBy("id DESC")->one();
        if ($order) {
            $order->status = Orders::STATUS_CONFIRMED;
            $order->save();
        }
    }

    public function actionPpCancel($id)
    {
        $order = Orders::find()->where(['pp_subscription_id' => $id])->orderBy("id DESC")->one();
        if ($order) {
            $order->status = Orders::STATUS_CANCELED;
            $order->save();
            return Yii::$app->response->content = 'Order is Canceled';
        } else {
            return Yii::$app->response->content = 'Order not Found';
        }
    }

    public function actionPpError()
    {
        if (isset($_REQUEST['error']) && isset($_REQUEST['id'])) {
            $order = Orders::find()->where(['pp_subscription_id' => $_REQUEST['id']])->orderBy("id DESC")->one();
            if ($order) {
                $order->errorMessage = $_REQUEST['error'];
                $order->status = Orders::STATUS_FAILED;
                $order->save();
            }
        }
    }

    public function actionStepOne()
    {
        $model = new OrderStepOne();
        $order_form = Yii::$app->request->post();
        $r['OrderStepOne'] = $order_form['OrderForm'];
        if ($model->load($r) && $model->save()) {
            if (OrderStepOne::findOne(['email' => trim($model->email)])) {
                return "Already Saved";
            }
            $model->ip_address = UtilityHelper::getClientIp();
            date_default_timezone_set('America/New_York');
            $model->date_created = date("Y-m-d H:i:s");
            $model->save();
            return Yii::$app->response->content = 200;
        } else {
            //var_dump($model->errors);
            return Yii::$app->response->content = "Error on Save";
        }
    }

    /**
     * Return view of Thankyou
     *
     * @return string
     */
    public function actionThankyou()
    {
        if (isset($_SESSION['previous_order'])) {
            unset($_SESSION['previous_order']);
        }
        return $this->render('thankyou');
    }

    public function shippingId()
    {
        if (isset($_REQUEST['shippingCountry'])) {
            if ($_REQUEST['shippingCountry'] == 'US') {
                $shippingId = isset($_REQUEST['shippingId']) ? UtilityHelper::getCustomParameters('cc.and.paypal.shipping.id') : UtilityHelper::getCustomParameters('us.free.shipping.id');
            } else if ($_REQUEST['shippingCountry'] == 'CA') {
                $shippingId = isset($_REQUEST['shippingId']) ? UtilityHelper::getCustomParameters('ca.expedited.shipping.id') : UtilityHelper::getCustomParameters('ca.standard.shipping.id');
            } else {
                $shippingId = UtilityHelper::getCustomParameters('international.shipping.id');
            }
            return $shippingId;
        }
    }

    public function shippingAmount()
    {
        if (isset($_REQUEST['shippingCountry'])) {
            if ($_REQUEST['shippingCountry'] == 'US') {
                $shippingAmount = isset($_REQUEST['shippingId']) ? UtilityHelper::getCustomParameters('us.free.shipping.amount') : UtilityHelper::getCustomParameters('us.expedited.shipping.amount');
            } else if ($_REQUEST['shippingCountry'] == 'CA') {
                $shippingAmount = isset($_REQUEST['shippingId']) ? UtilityHelper::getCustomParameters('ca.expedited.shipping.amount') : UtilityHelper::getCustomParameters('ca.standard.shipping.amount');
            } else {
                $shippingAmount = UtilityHelper::getCustomParameters('international.shipping.amount');
            }
            return $shippingAmount;
        }
    }

    public function getProducts() {


        if (Yii::$app->request->post('product_id')) {
            $product = Yii::$app->params[Yii::$app->request->post('product_id')] ?? NULL;
            if ($product) {
  
                $product_amount = $product['amount'];
                $product_name   = $product['name'];
  
                $productId = $this->payment_processor == 'paypal' ? $product['pp'] : $product['id'];
  
  
                $products[] = ['id'     => $productId,
                                'name'   => $product_name,
                                'amount' => $product_amount,];
  
                return $products;
  
  
            }
        }
    }
    /**
     * Displays Order Select.
    *
    * @return string
    */
    public function actionOrderSelect()
    {
      if (isset($_REQUEST['product']) && array_key_exists(trim($_REQUEST['product']), Yii::$app->params['all_products'])) {
  
        $product_key = $_REQUEST['product'];
        $product = Yii::$app->params['all_products'][$product_key];
        $product['product_key'] = $product_key;
  
        $_SESSION['cart']['product'] = $product;
      }
    }
    /**
     * Return view of Order
     *
     * @return string
     */
  
     public function actionIndex()
     {
       if (!isset($_SESSION['cart'])) {
         return $this->redirect('/');
       }
   
       $model = new \app\models\Forms\OrderForm();
   
       // validate any AJAX requests fired off by the form
       if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {
         Yii::$app->response->format = Response::FORMAT_JSON;
   
         return ActiveForm::validate($model);
       }
   
       if ($model->load(\Yii::$app->request->post())) {
         if ($model->validate()) {
           // form inputs are valid, do something here
           return;
         }
       }
   
       return $this->render('index', ['model' => $model]);
     }
  }